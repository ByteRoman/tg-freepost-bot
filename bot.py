import os
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, ContextTypes,
    MessageHandler, CommandHandler, CallbackQueryHandler,
    filters
)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_USERNAME = os.getenv("CHANNEL_USERNAME")

# Tag pairs: (English, Russian)
TAGS = [
    ("War", "–í–æ–π–Ω–∞"),
    ("Meme", "–ú–µ–º"),
    ("News", "–ù–æ–≤–æ—Å—Ç–∏"),
    ("Idea", "–ò–¥–µ—è"),
    ("Offtopic", "–§–ª—É–¥")
]

# Per-user message storage for callback handling
user_message_cache = {}

# Logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# Welcome message
WELCOME_MESSAGE = (
    "üëã Welcome!\n"
    "Send me a post (text, image, or file), and I‚Äôll forward it to the channel anonymously.\n"
    "You‚Äôll be asked to choose a topic tag first.\n\n"
    "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª), –∏ —è –∞–Ω–æ–Ω–∏–º–Ω–æ –æ–ø—É–±–ª–∏–∫—É—é –µ–≥–æ –≤ –∫–∞–Ω–∞–ª–µ.\n"
    "–°–Ω–∞—á–∞–ª–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É."
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_MESSAGE)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message:
        return

    # Store message content for later use
    user_message_cache[message.from_user.id] = message

    # Build tag keyboard
    keyboard = [
        [InlineKeyboardButton(f"{en} / {ru}", callback_data=en)]
        for en, ru in TAGS
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message.reply_text("üìå Choose a tag / –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥:", reply_markup=reply_markup)

async def tag_chosen(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in user_message_cache:
        await query.edit_message_text("‚ö†Ô∏è No message found. Please send a message first.")
        return

    # Find both tags
    tag_en = query.data
    tag_pair = next(((en, ru) for en, ru in TAGS if en == tag_en), None)
    if not tag_pair:
        await query.edit_message_text("‚ö†Ô∏è Tag not recognized.")
        return

    hashtags = f"#{tag_pair[0].lower()} #{tag_pair[1].lower()}"
    message = user_message_cache.pop(user_id)  # Clear after use
    text = (message.text or message.caption or "").strip()
    final_text = f"{hashtags}\n{text}" if text else hashtags

    if message.photo:
        photo = message.photo[-1].file_id
        await context.bot.send_photo(chat_id=CHANNEL_USERNAME, photo=photo, caption=final_text)

    elif message.document:
        doc = message.document.file_id
        await context.bot.send_document(chat_id=CHANNEL_USERNAME, document=doc, caption=final_text)

    elif text:
        await context.bot.send_message(chat_id=CHANNEL_USERNAME, text=final_text)

    else:
        await query.edit_message_text("‚ùó Unsupported message type.")

    await query.edit_message_text("‚úÖ Post sent! / –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.ALL & (~filters.COMMAND), handle_message))
    app.add_handler(CallbackQueryHandler(tag_chosen))

    print("ü§ñ Bot is running...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    import nest_asyncio

    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())

